// Code generated by go-validate tool. DO NOT EDIT.
package models

import (
	"errors"
	"regexp"
	"strconv"
	"strings"
)

type ValidationError struct {
	Field string
	Err   error
}

// Validate validates fields of User struct.
func (u User) Validate() ([]ValidationError, error) {
	var vErrs []ValidationError

	if len(u.ID) != 36 {
		vErrs = append(vErrs, ValidationError{
			Field: "ID",
			Err:   errors.New("length of ID must be 36 characters"),
		})
	}

	if u.Age < 18 {
		vErrs = append(vErrs, ValidationError{
			Field: "Age",
			Err:   errors.New("Age must be greater than 18"),
		})
	}

	if u.Age > 50 {
		vErrs = append(vErrs, ValidationError{
			Field: "Age",
			Err:   errors.New("Age must be less than 50"),
		})
	}

	uEmailRE, err := regexp.Compile("^\\w+@\\w+\\.\\w+$")
	if err != nil {
		return vErrs, err
	}
	if !uEmailRE.Match([]byte(u.Email)) {
		vErrs = append(vErrs, ValidationError{
			Field: "Email",
			Err:   errors.New(`Email is not matching regexp "^\\w+@\\w+\\.\\w+$"`),
		})
	}

	inStrings := strings.Split("admin,stuff", ",")
	var found bool
	for _, s := range inStrings {
		found = string(u.Role) == strings.TrimSpace(s)
		if found {
			break
		}
	}
	if !found {
		vErrs = append(vErrs, ValidationError{
			Field: "Role",
			Err:   errors.New("Role not in [admin,stuff]"),
		})
	}

	for _, item := range u.Phones {
		if len(item) != 11 {
			vErrs = append(vErrs, ValidationError{
				Field: "Phones",
				Err:   errors.New("length of each element in Phones must be 11 characters"),
			})
			break
		}
	}

	return vErrs, nil
}

// Validate validates fields of App struct.
func (a App) Validate() ([]ValidationError, error) {
	var vErrs []ValidationError

	if len(a.Version) != 5 {
		vErrs = append(vErrs, ValidationError{
			Field: "Version",
			Err:   errors.New("length of Version must be 5 characters"),
		})
	}

	return vErrs, nil
}

// Validate validates fields of Response struct.
func (r Response) Validate() ([]ValidationError, error) {
	var vErrs []ValidationError

	rCodeSet := strings.Split("200,404,500", ",")
	var found bool
	for _, s := range rCodeSet {
		i, err := strconv.Atoi(strings.TrimSpace(s))
		if err != nil {
			return vErrs, err
		}
		found = r.Code == i
		if found {
			break
		}
	}
	if !found {
		vErrs = append(vErrs, ValidationError{
			Field: "Code",
			Err:   errors.New("Code not in [200,404,500]"),
		})
	}

	rDescSet := strings.Split("ok, all good, not found, we miss it, server error, bad server", ",")
	for _, item := range r.Desc {
		var found bool
		for _, s := range rDescSet {
			found = item == strings.TrimSpace(s)
			if found {
				break
			}
		}
		if !found {
			vErrs = append(vErrs, ValidationError{
				Field: "Desc",
				Err:   errors.New("each item in Desc must be from [ok, all good, not found, we miss it, server error, bad server] set"),
			})
			break
		}
	}

	return vErrs, nil
}
